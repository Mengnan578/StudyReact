.form {
    position: absolute;
    top: 45%;
    left: 50%;
    margin: -160px 0 0 -160px;
    width: 320px;
    height: 320px;
    padding: 36px;
    box-shadow: 0 0 100px rgba(0, 0, 0, 0.08);
    &.forget-password {
      height: 280px;
    }
    .forget-password-title {
      font-size: 20px;
      font-weight: bold;
      color: #888;
      text-align: center;
      margin-bottom: 20px;
    }
    button {
      width: 100%;
    }
    .ft-12 {
        text-align: left;
    }
    .align-right {
        text-align: right;
    }
  }
  .logo {
    text-align: center;
    cursor: pointer;
    margin-bottom: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
  
    img {
      width: 40px;
      margin-right: 8px;
    }
  
    span {
      vertical-align: text-bottom;
      font-size: 16px;
      text-transform: uppercase;
      display: inline-block;
      font-weight: 700;
      color: #1890ff;
      background-image: -webkit-gradient(
        linear,
        37.219838% 34.532506%,
        36.425669% 93.178216%,
        from(#29cdff),
        to(#0a60ff),
        color-stop(0.37, #148eff)
      );
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
  }
  
  .ant-spin-container,
  .ant-spin-nested-loading {
    height: 100%;
  }
  
  .login-methods-container {
    color: #888;
    text-align: center;
    margin-top: 16px;
    font-size: 12px;
    display: flex;
    justify-content: flex-start;
    width: 100%;
    cursor: pointer;
    &.login-methods {
      justify-content: flex-end;
    }
  }
  span.anticon.anticon-arrow-right {
    display: flex;
    align-items: center;
    margin-left: 5px;
  }
  .form .ant-input-group-addon {
    padding: 0;
  }
  
  



/*
text-align 设施文本在其父内容中的对其方式
`transform` 是用来设置元素的**变换效果**的CSS属性。它可以用于改变元素的位置、大小和旋转，而不会影响其他元素的布局。通过修改变换矩阵，你可以在不改变元素的实际尺寸和位置的情况下，改变它在页面上的显示方式。

具体来说，`transform` 可以用于：

1. **平移（Translation）**：移动元素在页面上的位置，同时保持其大小不变。

2. **旋转（Rotation）**：围绕元素的中心点进行旋转，可以是二维或三维的旋转。

3. **缩放（Scale）**：按比例调整元素的大小，可以在水平和垂直方向上分别进行缩放。

4. **倾斜（Skew）**：在水平和垂直方向上倾斜元素，类似于扭曲的效果。

5. **变换原点（Transform Origin）**：指定变换的中心点，可以使变换围绕元素的不同位置进行。

6. **3D 变换**：在三维空间中执行各种变换，如旋转、平移、缩放等。

总之，`transform` 属性允许你通过应用各种变换效果来修改元素的显示外观，而无需改变其在文档流中的实际位置。这在创建各种动画效果和布局变化时非常有用。


`box-shadow` 是一个CSS属性，用于在元素周围创建阴影效果，从而为元素增加一种视觉上的深度感。通过添加阴影，可以使元素在页面上脱颖而出，与其他元素产生更明显的区分，并且可以用于实现各种设计效果。

`box-shadow` 属性的语法如下：

```css
box-shadow: h-shadow v-shadow blur spread color inset;
```

各个参数的含义如下：

- `h-shadow`：表示水平方向上的阴影偏移量。
- `v-shadow`：表示垂直方向上的阴影偏移量。
- `blur`：表示阴影的模糊程度。值越大，阴影越模糊，值为0时没有模糊效果。
- `spread`：表示阴影的尺寸扩展或收缩值。正值会扩展阴影，负值会收缩阴影。
- `color`：表示阴影的颜色。可以使用颜色名称、十六进制值、RGB、RGBA等形式来定义颜色。
- `inset`：可选参数，用于指定阴影是否在元素内部，创建内阴影效果。如果设置为 `inset`，阴影就在元素内部。

以下是一个示例：

```css
box-shadow: 3px 3px 5px 0px rgba(0, 0, 0, 0.5);
```

这个示例会在元素右下方产生一个稍微模糊的黑色阴影，给元素增加一些立体感。

`box-shadow` 通常用于以下情况：

1. **增加深度感和层次感**：通过在元素周围添加阴影，可以使元素在页面上显得凸显出来，与其他元素产生视觉分离。

2. **创建卡片式效果**：在卡片元素上应用阴影，可以使卡片看起来浮在其他内容之上，增加立体感。

3. **实现按钮点击效果**：通过调整阴影的偏移量和颜色，在按钮上实现点击效果，使用户可以感知到按钮的按下状态。

4. **设计元素的装饰效果**：阴影可以用于创建装饰性效果，如半透明边框或发光效果。

总之，`box-shadow` 是一种可以通过调整参数来创建各种阴影效果的CSS属性，用于增加元素的视觉吸引力和视差效果。


cursor: pointer;

`cursor` 是 CSS 属性，用于定义在元素上悬停时鼠标指针的外观。通过设置 `cursor` 属性，你可以改变鼠标指针在特定元素上的样式，从而提供用户与页面交互的视觉反馈。

`cursor` 属性可以接受不同的值，每个值对应不同的鼠标指针样式。以下是一些常见的 `cursor` 值：

1. **预定义样式**：
   - `auto`：浏览器会根据上下文自动选择适当的指针样式。
   - `default`：标准箭头指针。
   - `pointer`：手形指针，表示链接或可点击元素。
   - `text`：文本光标，表示可输入文本的区域。

2. **显示手柄类型**：
   - `grab`：表示鼠标指针在元素上，表示可以点击并拖动。
   - `grabbing`：表示鼠标指针在元素上，表示正在拖动。

3. **自定义图像**：
   - 你还可以使用 `url()` 函数指定自定义的鼠标指针图像。

示例：

```css
.element {
  cursor: pointer; /* 设置为手形指针 
}
```

通过设置适当的 `cursor` 属性，你可以根据元素的功能和上下文，改变鼠标指针的外观，以便用户能够直观地了解元素的交互行为。这对于提高用户体验和界面可用性非常重要。

*/